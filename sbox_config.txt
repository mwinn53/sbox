#################################
Basic configuration in raspi-config
#################################
- Locale (US)
- hostname: sbox
- wifi

sudo systemctl disable hciuart.service
sudo systemctl disable bluealsa.service
sudo systemctl disable bluetooth.service

sudo nano /boot/config.txt
# Disable Bluetooth
dtoverlay=pi3-disable-bt

sudo apt-get install nmap tshark tcpdump gparted tmux iftop
sudo apt-get purge bluez -y
sudo apt-get autoremove -y

net.ipv6.conf.all.disable_ipv6 = 1
sudo sysctl -p

# configure ssh 

#################################
install and configure dnsmasq
#################################
sudo apt-get install dnsmasq
sudo nano /etc/dnsmasq.conf

interface=eth0
resolv-file=/etc/resolv.dnsmasq.conf
log-facility=/var/log/dnsmasq.log
all-servers
dhcp-leasefile=/tmp/dnsmasq.leases
dhcp-option=lan,1,255.255.255.252
dhcp-option=lan,3,10.100.86.1
dhcp-option=lan,6,10.100.86.1
dhcp-authoritative
dhcp-range=lan,10.100.86.2,10.100.86.2,255.255.255.252,1440m
stop-dns-rebind
log-dhcp
log-queries

sudo nano /etc/resolv.dnsmasq.conf
nameserver 198.46.156.50
nameserver 75.137.14.107
nameserver 74.207.232.103

#################################
install openvpn and elinks
#################################

sudo apt-get install openvpn elinks


#################################
share the eth0 with wlan0
#################################
# Uncomment the line in /etc/sysctl.conf to enable packet forwarding for IPv4
net.ipv4.ip_forward=1  

sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"

sudo iptables -P INPUT ACCEPT
sudo iptables -F

sudo iptables -N LOGGING-DRP
sudo iptables -A LOGGING-DRP -j LOG -m limit --limit 5/s --log-prefix "IPTables-Dropped: " --log-level 4
sudo iptables -A LOGGING-DRP -j DROP

sudo iptables -N LOGGING-ACP
sudo iptables -A LOGGING-ACP -j LOG -m limit --limit 5/s --log-prefix "IPTables-Accepted: " --log-level 4
sudo iptables -A LOGGING-ACP -j ACCEPT

sudo iptables -A INPUT -i lo -j ACCEPT
sudo iptables -A INPUT -i $EXTIF -s 174.63.244.248 -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A INPUT -i $EXTIF -p udp --sport 53 -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A INPUT -i $EXTIF -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A INPUT -i $EXTIF -m pkttype --pkt-type broadcast -j DROP
sudo iptables -A INPUT -i $EXTIF -m iprange --dst-range 224.0.0.0-239.255.255.255 -j DROP
sudo iptables -A INPUT -i $EXTIF -d 255.255.255.255 -j DROP
sudo iptables -A INPUT -i $EXTIF -s 0.0.0.0 -j DROP
sudo iptables -A INPUT -i $INTIF -p tcp --dport ssh -j ACCEPT
sudo iptables -A INPUT -i $INTIF -p udp --dport 53 -j ACCEPT
sudo iptables -A INPUT -i $INTIF -j ACCEPT
sudo iptables -A INPUT -i tun0 -j ACCEPT
sudo iptables -A INPUT -j LOGGING-ACP
sudo iptables -P INPUT DROP

sudo iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE

sudo iptables -A FORWARD -i tun0 -o $INTIF -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A FORWARD -i $INTIF -o tun0 -j ACCEPT
sudo iptables -A FORWARD -j LOGGING-DRP
sudo iptables -P FORWARD DROP

sudo iptables -A OUTPUT -o $EXTIF -d 174.63.244.248 -p tcp --dport 443 -j ACCEPT
sudo iptables -A OUTPUT -o $EXTIF -d 174.63.244.248 -p udp --dport 1194 -j ACCEPT
sudo iptables -A OUTPUT -o $EXTIF tcp --dport 443,80 -j ACCEPT
sudo iptables -A OUTPUT -o $EXTIF -p udp --dport 53 -j ACCEPT

sudo iptables -A OUTPUT -o $INTIF -j ACCEPT
sudo iptables -A OUTPUT -o tun0 -j ACCEPT
sudo iptables -A OUTPUT -j LOGGING-ACP
sudo iptables -P OUTPUT DROP

# traffic from eth0 should only go out tun0
# need to leave WLAN0 open for honeyd

sudo sh -c "iptables-save > /etc/iptables.ipv4.nat"
sudo nano /etc/rc.local
sudo reboot


#################################
Connect to WIFI
#################################
# fake MAC address
sudo apt-get install macchanger

# [orig] ether b8:27:eb:45:61:66
# filter /usr/share/macchanger/OUI.lst down to common wifi cards
# Samsung, Apple, Dell, HP, LG Electronics

88 53 2E Intel Corporate
D4 BE D9 Dell Inc
00 50 56 VMware, Inc.

FC 19 10 Samsung Electronics
4C 66 41 Samsung Electronics

sudo ifconfig wlan0 down
sudo service networking stop
sudo macchanger -A wlan0
sudo service networking start
sudo ifconfig wlan0 up
sudo iwconfig wlan0 essid "Navy_MWR_WiFi"
ifconfig wlan0
cd /etc/openvpn/client
sudo openvpn --config remote-udp1194.ovpn --askpass &

sudo iwlist wlan0 scan | grep ESSID
sudo iwconfig wlan0 essid "<ESSID>"

# open elinks and sign in if necessary
ifconfig | grep inet (not $69)

#################################
Connect to OPENVPN Server
#################################
cd /sbox
cd /etc/openvpn/client
sudo openvpn --config remote-udp1194.ovpn --askpass auth.txt &  ## add to rc.local to run when WIFI is active

#################################
Add a swap file
#################################
fallocate -l 1G /swapfile  
OR
dd if=/dev/zero of=/swapfile bs=1M count=512

# Set the right permissions (because a world-readable swap file is a huge local vulnerability):
chmod 600 /swapfile

# After creating the correctly sized file, format it to swap:
mkswap /swapfile

# Activate the swap file:
swapon /swapfile

# Edit /etc/fstab and add an entry for the swap file:
/swapfile none swap defaults 0 0

#################################
install and configure honeyd
#################################

#################################
clean-up
#################################
sudo apt-get remove gparted mlocate
sudo apt-get clean
sudo apt autoremove
sudo apt-get update
sudo apt-get upgrade

#################################
config script
#################################
Run at login
Show status of tunnel and WIFI
Menu with available WIFI (SSID and security)
Enter WiFi SSID and password
Break out to Shell


#################################
LED indicators
#################################

# led0 = GREEN / led1 = RED
# Flash RED when READY to configure; solid thereafter
# Solid RED / Flash GREEN when WIFI is connected
# Solid RED / Solid GREEN when TUNNEL is established

modprobe ledtrig_heartbeat

echo heartbeat > /sys/class/leds/led0/trigger
default-on
none

#################################
Install and configure hostapd
#################################

#### Script to create the hostapd.conf file
#!/bin/bash
$CONFFILE=/etc/hostapd/hostapd.conf
if [ $# -eq 0 ];  then
	echo "No interface specified. Setting default to wlan0."
    INT=wlan0

else
	if [[ $1 == "wlan"[0-9] ]]; then
		INT=$1
	else
		echo "Error in interface name ($1). Setting default to wlan0."
		INT=wlan0
fi

if [ -f $CONFFILE ]; then
	FEXISTS=1
	echo "Found existing configuration file..."
	SSID=grep '^ssid=' hostapd.conf | sed -r 's/(ssid=)//'
	CHANNEL=grep '^channel=' hostapd.conf | sed -r 's/(channel=)//'
	MODE=grep '^hw_mode=' hostapd.conf | sed -r 's/(hw_mode=)//'
	WPAPASS=grep '^wpa_passphrase=' hostapd.conf | sed -r 's/(wpa_passphrase=)//'
else
	FEXISTS=0
	echo "No configuration file exists. Using default values..."
	SSID=$(hexdump -v -n 2 -e '1/1 "%02x"' /dev/urandom | tr '[:lower:]' '[:upper:]')'
	SSID=TP-LINK_$SSID
	CHANNEL=6
	MODE=g
	WPAPASS=$(strings /dev/urandom |tr -dc A-Za-z0-9 | head -c8)
fi

if [ $FEXISTS ] ; then
	FEXISTS="existing value"
else
	FEXISTS="default"
fi
	
BACKTITLE="sbox Wireless Access Point Setup"
INTS=$(ifconfig | grep "wlan"[0-9] | sed -r 's/:.*//')

SSID=$(whiptail --backtitle "$BACKTITLE" --title "Configure an Interface." --default-item $INT --menu "Select the interface that hosts the AP. The $FEXISTS ($INT) is selected." 8 78 $INTS 3>&1 1>&2 2>&3)

# Need to set the IP Addy on $INT

MODES="b 802.11b off g 802.11g on n 802.11n off"
MODE=$(whiptail --backtitle "TEST" --title "Set the WIFI Mode." --radiolist "Choose a mode. The $FEXISTS is $MODE" 8 60 3 $MODES 3>&1 1>&2 2>&3)

if [ $MODE == 'b' || $MODE == 'g' ]; then
	FREQS="1 2.401-2.423GHz off  2 2.406-2.428GHz off  3 2.411-2.433GHz off  4 2.416-2.438GHz off  5 2.421-2.443GHz off  6 2.426-2.448GHz on  7 2.431-2.453GHz off  8 2.436-2.458GHz off  9 2.441-2.463GHz off  10 2.446-2.468GHz off  11 2.451-2.473GHz off  12 2.456-2.478GHz off  13 2.461-2.483GHz off  14 2.473-2.495GHz off"

	CHANNEL=$(whiptail --backtitle "TEST" --title "Set the WIFI Channel. The $FEXISTS is $CHANNEL." --radiolist "Choose a channel (802.11$MODE)." 20 60 14 $FREQS 3>&1 1>&2 2>&3 

if [ $MODE == 'n' ]; then
	FREQS="1 2.401-2.423GHz off  2 2.406-2.428GHz off  3 2.411-2.433GHz off  4 2.416-2.438GHz off  5 2.421-2.443GHz off  6 2.426-2.448GHz on  7 2.431-2.453GHz off  8 2.436-2.458GHz off  9 2.441-2.463GHz off  10 2.446-2.468GHz off  11 2.451-2.473GHz off  12 2.456-2.478GHz off  13 2.461-2.483GHz off  14 2.473-2.495GHz off 36 5.180GHz off 40 5.200GHz off 44 5.220GHz off 48 5.240GHz off 52 5.260GHz off 56 5.280GHz off 60 5.300GHz off 64 5.320GHz off 100 5.500GHz off 104 5.520GHz off 108 5.540GHz off 112 5.560GHz off 116 5.580GHz off 120 5.600GHz off 124 5.620GHz off 128 5.640GHz off 132 5.660GHz off 136 5.680GHz off 140 5.700GHz off 149 5.745GHz off 153 5.765GHz off 157 5.785GHz off 161 5.805GHz off 165 5.825GHz off"
	
	CHANNEL=$(whiptail --backtitle "TEST" --title "Set the WIFI Channel. The $FEXISTS is $CHANNEL." --radiolist "Choose a channel (802.11$MODE)." 24 60 16 $FREQS 3>&1 1>&2 2>&3 
fi

WPAPASS=$(whiptail --backtitle "$BACKTITLE" --title "Set the WIFI password." --inputbox "Enter a new password, or use the $FEXISTS." 8 78 $WPAPASS 3>&1 1>&2 2>&3)

# Generate config file
sudo echo "# hostapd configuration file." > $CONFFILE
sudo echo "generated by sbox Wireless Access Point Setup" >> $CONFFILE
sudo echo "" >> $CONFFILE
sudo echo "interface=$INT" >> $CONFFILE
sudo echo "driver=nl80211" >> $CONFFILE
sudo echo "ssid=$SSID" >> $CONFFILE
sudo echo "hw_mode=g" >> $CONFFILE
sudo echo "channel=$CHANNEL" >> $CONFFILE
sudo echo "ieee80211n=1" >> $CONFFILE
sudo echo "wmm_enabled=1" >> $CONFFILE
sudo echo "ht_capab=[HT40][SHORT-GI-20][DSSS_CCK-40]" >> $CONFFILE
sudo echo "macaddr_acl=0" >> $CONFFILE
sudo echo "auth_algs=1" >> $CONFFILE
sudo echo "ignore_broadcast_ssid=0" >> $CONFFILE
sudo echo "wpa=2" >> $CONFFILE
sudo echo "wpa_key_mgmt=WPA-PSK" >> $CONFFILE
sudo echo "wpa_passphrase=$WPAPASS" >> $CONFFILE
sudo echo "rsn_pairwise=CCMP" >> $CONFFILE

echo "Configuring $INT with a static IP..."	
sudo ifconfig wlan0 down

iface wlan0 inet static
    address 192.168.0.1
    netmask 255.255.255.248
    network 192.168.0.0
    broadcast 192.168.0.7

echo "Starting DNS & DHCP server for wlan0..."
dnsmasq --interface=$INT --except-interface=lo --resolv-file=/etc/resolv.dnsmasq.conf --bind-interfaces --dhcp-range=lan,192.168.0.2,192.168.0.6,8h --dhcp-option=lan,1,255.255.255.248 --dhcp-option=lan,3,10.100.86.1 --dhcp-option=lan,6,10.100.86.1 --dhcp-authoritative --stop-dns-rebind --log-dhcp --log-queries --log-facility=/var/log/dnsmasq_wifi.log &

sudo ifconfig wlan0 up
sudo networking restart


echo "Starting the Wireless AP..."	
sudo /usr/sbin/hostapd /etc/hostapd/hostapd.conf &


#################################
Install Logstash
#################################
curl -O https://download.elastic.co/logstash/logstash/packages/debian/logstash_2.3.2-1_all.deb
sudo dpkg -i logstash_2.3.2-1_all.deb

#################################
Install and Configure software ut
#################################


