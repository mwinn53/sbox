#!/bin/bash

usage() { echo "Usage: $0 -i <wlan\*> -f <configfile.conf> -q" 1>&2; exit 1; }

# Parse arguments
while getopts qe:i:s:k: option
do
	case ${option}
	in
		i) WINT=$OPTARG;;		# WAP Interface (i.e., wlan0, eth0, etc.)
		f) CONFFILE=$OPTARG;;	# Configuration File
		:) echo "$OPTARG requires an argument."	# If expected argument omitted.
		usage;;
		*) usage;; 						# If no options are matched.
	esac
done

if [ -z $CONFFILE ]; then
	CONFFILE="/etc/hostapd/hostapd.conf"
fi
 
clear
if [[ -z $WINT ]];  then
	echo "No interface specified. Setting default to wlan0."
    INT="wlan0"

else
	if [[ $WINT == "wlan"[0-1] ]]; then
		INT=$WINT
	else
		echo "Error in interface name ($1). Setting default to wlan0."
		INT="wlan0"
	fi
fi

if [[ -f $CONFFILE ]]; then
	FEXISTS=1
	echo "Found existing configuration file..."
	SSID=$(grep '^ssid=' /etc/hostapd/hostapd.conf | sed -r 's/(ssid=)//')
	if [[ $SSID == "" ]]; then
		SSID=$(hexdump -v -n 2 -e '1/1 "%02x"' /dev/urandom | tr '[:lower:]' '[:upper:]')
	        SSID=TP-LINK_$SSID
	fi
	CHANNEL=$(grep '^channel=' /etc/hostapd/hostapd.conf | sed -r 's/(channel=)//')
	MODE=$(grep '^hw_mode=' /etc/hostapd/hostapd.conf | sed -r 's/(hw_mode=)//')
	WPAPASS=$(grep '^wpa_passphrase=' /etc/hostapd/hostapd.conf | sed -r 's/(wpa_passphrase=)//')
	if [[ $WPAPASS == "" ]]; then
	        WPAPASS=$(strings /dev/urandom |tr -dc A-Za-z0-9 | head -c8)
	fi
else
	FEXISTS=0
	echo "No configuration file exists. Using default values..."
	SSID=$(hexdump -v -n 2 -e '1/1 "%02x"' /dev/urandom | tr '[:lower:]' '[:upper:]')
	SSID=TP-LINK_$SSID
	CHANNEL=6
	MODE=g
	WPAPASS=$(strings /dev/urandom |tr -dc A-Za-z0-9 | head -c8)
	sudo touch $CONFFILE
	sudo chmod 777 $CONFFILE
fi

if [[ $FEXISTS ]] ; then
	FEXISTS="existing value"
else
	FEXISTS="default"
fi

if [ -z $WINT ]; then

	BACKTITLE="sbox Wireless Access Point Setup"
	for i in $(ls /sys/class/net | grep -i "wlan"); do ((item++)); INTS="$INTS ${i} up" ; done

	## TODO: Check for non-active interfaces ##
	# for i in $INTS; do
	#	if [ -z ${ifconfig ${i} | grep inet} ]
			
	INT=$(whiptail --backtitle "$BACKTITLE" --title "Configure an Interface." --menu "Select the interface that hosts the AP.\nThe $FEXISTS $INT is selected." --default-item $INT 15 50 5 $INTS 3>&1 1>&2 2>&3)
	RESPONSE=$?
	if [ $RESPONSE != 0 ]; then
			whiptail --backtitle "$BACKTITLE" --title "$TITLE" --msgbox "User CANCELLED." 12 80
			exit 1
	fi

	# Need to set the IP Addy on $INT
	MODES="b 802.11b off g 802.11g on n 802.11n off"
	MODE=$(whiptail --backtitle "$BACKTITLE"  --title "Set the WIFI Mode." --radiolist "Choose a mode. The $FEXISTS is $MODE." 12 60 3 $MODES 3>&1 1>&2 2>&3)
	RESPONSE=$?
	if [ $RESPONSE != 0 ]; then
			whiptail --backtitle "$BACKTITLE" --title "$TITLE" --msgbox "User CANCELLED." 12 80
			exit 1
	fi

	if [[ $MODE == 'b' || $MODE == 'g' ]]; then
		FREQS="1 2.401-2.423GHz off  2 2.406-2.428GHz off  3 2.411-2.433GHz off  4 2.416-2.438GHz off  5 2.421-2.443GHz off  6 2.426-2.448GHz on  7 2.431-2.453GHz off  8 2.436-2.458GHz off  9 2.441-2.463GHz off  10 2.446-2.468GHz off  11 2.451-2.473GHz off  12 2.456-2.478GHz off  13 2.461-2.483GHz off  14 2.473-2.495GHz off"
		CHANNEL=$(whiptail --backtitle "$BACKTITLE"  --title "Set the (802.11$MODE) WIFI Channel." --radiolist "Choose a channel (the $FEXISTS is $CHANNEL)." 22 80 14 $FREQS 3>&1 1>&2 2>&3)
	fi

	if [[ $MODE == 'n' ]]; then
		FREQS="1 2.401-2.423GHz off  2 2.406-2.428GHz off  3 2.411-2.433GHz off  4 2.416-2.438GHz off  5 2.421-2.443GHz off  6 2.426-2.448GHz on  7 2.431-2.453GHz off  8 2.436-2.458GHz off  9 2.441-2.463GHz off  10 2.446-2.468GHz off  11 2.451-2.473GHz off  12 2.456-2.478GHz off  13 2.461-2.483GHz off  14 2.473-2.495GHz off 36 5.180GHz off 40 5.200GHz off 44 5.220GHz off 48 5.240GHz off 52 5.260GHz off 56 5.280GHz off 60 5.300GHz off 64 5.320GHz off 100 5.500GHz off 104 5.520GHz off 108 5.540GHz off 112 5.560GHz off 116 5.580GHz off 120 5.600GHz off 124 5.620GHz off 128 5.640GHz off 132 5.660GHz off 136 5.680GHz off 140 5.700GHz off 149 5.745GHz off 153 5.765GHz off 157 5.785GHz off 161 5.805GHz off 165 5.825GHz off"
		CHANNEL=$(whiptail --backtitle "$BACKTITLE"  --title "Set the WIFI Channel. The $FEXISTS is $CHANNEL." --radiolist "Choose a channel (802.11$MODE)." 24 60 16 $FREQS 3>&1 1>&2 2>&3)
	fi
	SSID=$(whiptail --backtitle "$BACKTITLE" --title "Set the WIFI SSID." --inputbox "The $FEXISTS is $SSID." 8 78 $SSID 3>&1 1>&2 2>&3)
	RESPONSE=$?
	if [ $RESPONSE != 0 ]; then
			whiptail --backtitle "$BACKTITLE" --title "$TITLE" --msgbox "User CANCELLED." 12 80
			exit 1
	fi

	WPAPASS=$(whiptail --backtitle "$BACKTITLE" --title "Set the WIFI password." --inputbox "Enter a new password, or use the $FEXISTS." 8 78 $WPAPASS 3>&1 1>&2 2>&3)
	RESPONSE=$?
	if [ $RESPONSE != 0 ]; then
			whiptail --backtitle "$BACKTITLE" --title "$TITLE" --msgbox "User CANCELLED." 12 80
			exit 1
	fi
fi

# Generate config file
echo "# hostapd configuration file." > $CONFFILE
echo "# generated by sbox Wireless Access Point Setup" >> $CONFFILE
echo "" >> $CONFFILE
echo "interface=$INT" >> $CONFFILE
# echo "driver=nl80211" >> $CONFFILE
echo "ssid=$SSID" >> $CONFFILE
echo "hw_mode=g" >> $CONFFILE
echo "channel=$CHANNEL" >> $CONFFILE
echo "ieee80211n=1" >> $CONFFILE
echo "wmm_enabled=1" >> $CONFFILE
echo "ht_capab=[HT40][SHORT-GI-20][DSSS_CCK-40]" >> $CONFFILE
echo "macaddr_acl=0" >> $CONFFILE
echo "auth_algs=1" >> $CONFFILE
echo "ignore_broadcast_ssid=0" >> $CONFFILE
echo "wpa=2" >> $CONFFILE
echo "wpa_key_mgmt=WPA-PSK" >> $CONFFILE
echo "wpa_passphrase=$WPAPASS" >> $CONFFILE
echo "rsn_pairwise=CCMP" >> $CONFFILE
echo ""
echo "***[ USER INPUT COMPLETE ]*******"
echo "> Configuring AP..."

echo "Configuring IPTABLES..."
sudo iptables -D INPUT -j LOGGING-ACP
sudo iptables -A INPUT -i $INT -p udp --dport 53 -j ACCEPT
sudo iptables -A INPUT -i $INT -j ACCEPT
sudo iptables -A INPUT -i $INT -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A INPUT -j LOGGING-ACP

sudo iptables -D FORWARD -j LOGGING-DRP
sudo iptables -A FORWARD -i tun0 -o $INT -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A FORWARD -i $INT -o tun0 -j ACCEPT
sudo iptables -A FORWARD -j LOGGING-DRP

sudo iptables -D OUTPUT -j LOGGING-ACP
sudo iptables -A OUTPUT -o $INT -j ACCEPT
sudo iptables -A OUTPUT -j LOGGING-ACP

echo "Configuring $INT with a static IP..."
sudo ip link set dev $INT down
sudo ip addr flush dev $INT
sudo ip addr add 192.168.0.1/29 dev $INT
sudo ip link set dev $INT up
sudo ip route add default via 192.168.0.1

echo "Starting DNS & DHCP server for $INT..."
sudo dnsmasq --interface=$INT --except-interface=lo,eth0 --resolv-file=/etc/resolv.dnsmasq.conf --bind-interfaces --dhcp-range=interface:$INT,192.168.0.2,192.168.0.6,8h --dhcp-option=lan,1,255.255.255.248 --dhcp-option=lan,3,192.168.0.1 --dhcp-option=lan,6,192.168.0.1 --dhcp-authoritative --stop-dns-rebind --log-dhcp --log-queries --log-facility=/var/log/dnsmasq_wifi.log &

echo "Starting the Wireless AP..."
sudo /usr/sbin/hostapd /etc/hostapd/hostapd.conf &

echo ""
echo ""
echo "*********************************"
echo "**** WIFI Access Point is UP ****"
echo "*********************************"
echo "   SSID:     $SSID"
echo "   password: $WPAPASS "
echo "*********************************"

